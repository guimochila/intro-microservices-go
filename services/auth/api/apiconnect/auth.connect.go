// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/guimochila/intro-microservices-go/services/auth/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceGetTokenProcedure is the fully-qualified name of the AuthService's GetToken RPC.
	AuthServiceGetTokenProcedure = "/AuthService/GetToken"
	// AuthServiceValidateTokenProcedure is the fully-qualified name of the AuthService's ValidateToken
	// RPC.
	AuthServiceValidateTokenProcedure = "/AuthService/ValidateToken"
)

// AuthServiceClient is a client for the AuthService service.
type AuthServiceClient interface {
	GetToken(context.Context, *connect.Request[api.Credentials]) (*connect.Response[api.Token], error)
	ValidateToken(context.Context, *connect.Request[api.Token]) (*connect.Response[api.User], error)
}

// NewAuthServiceClient constructs a client for the AuthService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := api.File_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		getToken: connect.NewClient[api.Credentials, api.Token](
			httpClient,
			baseURL+AuthServiceGetTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetToken")),
			connect.WithClientOptions(opts...),
		),
		validateToken: connect.NewClient[api.Token, api.User](
			httpClient,
			baseURL+AuthServiceValidateTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("ValidateToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	getToken      *connect.Client[api.Credentials, api.Token]
	validateToken *connect.Client[api.Token, api.User]
}

// GetToken calls AuthService.GetToken.
func (c *authServiceClient) GetToken(ctx context.Context, req *connect.Request[api.Credentials]) (*connect.Response[api.Token], error) {
	return c.getToken.CallUnary(ctx, req)
}

// ValidateToken calls AuthService.ValidateToken.
func (c *authServiceClient) ValidateToken(ctx context.Context, req *connect.Request[api.Token]) (*connect.Response[api.User], error) {
	return c.validateToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the AuthService service.
type AuthServiceHandler interface {
	GetToken(context.Context, *connect.Request[api.Credentials]) (*connect.Response[api.Token], error)
	ValidateToken(context.Context, *connect.Request[api.Token]) (*connect.Response[api.User], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := api.File_auth_proto.Services().ByName("AuthService").Methods()
	authServiceGetTokenHandler := connect.NewUnaryHandler(
		AuthServiceGetTokenProcedure,
		svc.GetToken,
		connect.WithSchema(authServiceMethods.ByName("GetToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceValidateTokenHandler := connect.NewUnaryHandler(
		AuthServiceValidateTokenProcedure,
		svc.ValidateToken,
		connect.WithSchema(authServiceMethods.ByName("ValidateToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceGetTokenProcedure:
			authServiceGetTokenHandler.ServeHTTP(w, r)
		case AuthServiceValidateTokenProcedure:
			authServiceValidateTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) GetToken(context.Context, *connect.Request[api.Credentials]) (*connect.Response[api.Token], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("AuthService.GetToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) ValidateToken(context.Context, *connect.Request[api.Token]) (*connect.Response[api.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("AuthService.ValidateToken is not implemented"))
}
